from _overlapped import NULL
__author__ = 'dyu2hc'

from xlrd import open_workbook
import re, sys, os
import DoorSys_gui
import message

absolutenum_col = 0             #Absolute number column
comment_col = 1                 #Comment test center column
testresult = 2                  #Test Result status column name
modlink=3                       #module link
start_row_number = 1            #first line to read in excel file
sheet_number = 0                #sheet to read in excel file
number_of_record = 0        #number of requirement to update
data = []                       #data to write in DOORS
                     #link of module
skip_blank_row = True
loc = os.path.realpath(__file__)
# print (loc)
# dxl_file_name = loc.replace('DoorsUtilities_Version1.0\\DoorsFill.py','Output')
# dxl_file_name = dxl_file_name + "\\DXL.txt"
excel_file_name = loc.replace('DoorsFill.py','SystemData.xlsx')
resultName = loc.replace('DoorsFill.py','Result.txt')
# excel_file_name = excel_file_name + "\\data.xlsx"
# print (excel_file_name)
number_of_column_in_data = 3
have_error = False
wb = None
s = None
# f = open(dxl_file_name, 'w')
#delete all old content of DXL file


#Define ari1yh
TestResultData= [] ##Testcase, result and Obtain
DoorData= [] ##Heading and Page
g_all_data = []

NumberOfValidColumn = 7 
       
def Main():
        Sample()
        fillData()
#         CheckXMLResult()
        

def Sample():
    
    excel = open_workbook(excel_file_name)
    sheet_0 = excel.sheet_by_index(0) # Open the first tab
    
    prev_row = [None for i in range(sheet_0.ncols)]
    for row_index in range(sheet_0.nrows):
        row= []
        for col_index in range(sheet_0.ncols):
            if col_index <= NumberOfValidColumn :
                CheckValid = sheet_0.cell(rowx=row_index,colx= 7).value #Read Colunm Generate or not
                if "Generate" in CheckValid:
                    value = sheet_0.cell(rowx=row_index,colx=col_index).value
                    if col_index == 0:
                        if len(value) == 0:
                            value = prev_row[col_index]
                    
                    
                    row.append(value)
            else:
                pass
        if len(row) >1:    
            prev_row = row
            g_all_data.append(row)
    
    print(g_all_data)    

       
def fillData():
    
    ReturnList.writelines("ListTestCases = {\t\t\t\t\t\t#Test Cases ID\t\t\t#vEgo\t\t#vObj\t#dInitObjEgo\t#testpattern\t#variant\t\t#Number of RQ\n\n" )
    counter = 1
    for index in g_all_data[1:]:
        p = re.compile('(?!=[\\d])\d+$')
        RetNum = p.search(index[0])
        if RetNum is None:
            print("<E> Cannot find absolute number in requirement %s" %index[0] )
        else:
            ReturnList.writelines("\t\t\t\t'%d'\t\t:\t\t\t('%s',\t\t%d,\t\t%d,\t\t\t%d,\t\t\t'%s',\t\t'%s',\t\t%s),\n" % (counter, index[1], index[2], index[3], index[4], index[5], index[6], RetNum.group(0).strip()))
            
#         print("Data : {} \n",  index)   
        
        counter = counter + 1
    
    ReturnList.writelines("\t\t}")
    ReturnList.close()
    
    
    print("Complete")  
#     print('Data: ', all_data[2:9])
    #for row in data:
    #    print(row[0].stripaa(), "   ", row[1].strip())
def read_excel_file():
    excel = open_workbook(excel_file_name)
    sheet_0 = excel.sheet_by_index(sheet_number)
    
    if excel is None:
        print("Cannot find %s" % sys.argv[1])
    print('- Reading Sheet:', sheet_0.name)
    number_of_record = sheet_0.nrows
    print("- Number of test cases to update:",  number_of_record - 1)
    for row in range(sheet_0.nrows):
        if row == 0:
            pass ##Heading row. DO not thing
        else:
            NumberTestCase = sheet_0.cell(row, 0).value
            TestResult = sheet_0.cell(row, 1).value
            #HeadingTestResultCol = sheet_0.cell(row, 2).value
            #Page = sheet_0.cell(row, 3).value
            ObtainTestResult = sheet_0.cell(row, 2).value
            
            ObtainTestResult = ObtainTestResult.replace('\\','\\\\')
            TestResultData.append([NumberTestCase, TestResult, ObtainTestResult])
            #DoorData.append([HeadingTestResultCol, Page])
def CheckingData(data = []):
    ## Checking if any Testcase, Test Result contain null
    ## Return True if one of them do not contain data
    listValidResult = ('passed', 'failed', 'n/a', 'Passed', 'Failed')
    errorList = []
    ReturnValue = False
    for row in data:
        if row[0] == '' or row[1] == '' or row[1] not in listValidResult :
            if row[0] == '':
                errorList.append("<Error> Cannot find the Test Case in row %d" %(data.index(row) + 2))
            elif row[1] == '':
                errorList.append("<Error> Cannot find the Test Result in row %d" %(data.index(row) + 2))
            else:
                errorList.append("<Error> Test result status is INVALID in row %d" %(data.index(row) + 2))    
            ReturnValue = True
    return ReturnValue, errorList
def checkDoubleTC(data = []):
    isDouble = False
    errorList= []
    for index in range(len(data)):
        if index == len(data) -1:
            break
        for index2 in range(index +1, len(data)):
            if data[index][0]== data[index2][0]:
                isDouble = True
                errorList.append("<Error> Double test case number between Row: %d and Row: %d"%(index +2, index2 +2))
                       
    return isDouble, errorList
    
    
def GetOnlyNumber():
    ## Get only the number of Test case
    ## Return True if one of them cannot convert
    ReturnVal = False
    
    for index in TestResultData:
        p = re.compile('(?!=[\\d])\d+$')
        RetNum = p.search(index[0])
        if RetNum is None:
            print("<E> Cannot find absolute number in requirement %s. Row : %d" %(index[0], TestResultData.index(index) + 2) )
            ReturnVal = True
        else:
            index[0] = RetNum.group(0).strip()
            
    return ReturnVal   

def Process(pageName = '', TestResult= ''):
    if ('Ex:' in pageName or 'Ex:' in TestResult) or \
         'Test Result Status' not in TestResult \
         or (pageName == '' or TestResult ==''):
        message.message_info('Please input correct data!')
        print('Please input correct data!')
    else:
        DoorData.append([TestResult, pageName])
    
        CheckingTotal = True
        
        print("**** ==============================================**** ")
        print("**** ==============================================**** ")
        print("**** Reading excel file... **** ")
        read_excel_file() 
         
        Ret = GetOnlyNumber()
        if Ret == False:
            CheckingTotal = True
    #         TestResultData = data
        else:
            CheckingTotal = False
            
        if CheckingTotal == False:
            print("**** Data error ****") 
            print("**** Stop generating ****") 
            mss ='Generating Failed!'
            message.message_info(mss) 
        else:   
            print("**** Checking data...**** ") 
            Return, Listerror = CheckingData(TestResultData)
            Return1, Listerror1 = checkDoubleTC(TestResultData)
            if Return == True or Return1 == True :
                print("- Some error in data:")
                for error in Listerror:
                    print(error) 
                for error in Listerror1:
                    print(error) 
                mss ='Generating Failed!'
                message.message_info(mss) 
            else:
                print("Data is no issue")
                print("*** START GENERATING SCRIPTS ***")
                write_dxl_file()
                print("*** COMPLETE GENERATING SCRIPTS ***")
                
                
                mss ='Generating completely!'
                message.message_info(mss)    
                os.system(resultName)
    
    TestResultData.clear() ##Reset
    DoorData.clear()
        
def write_dxl_file():
    ReturnList= open("Result.txt", "w+")
    ReturnList.truncate()
    g_index_row = 0
 
    #DXL: create array to store data
    res = '"' + DoorData[0][0] + '"'
    obtainCol = '"' + DoorData[0][0].replace("Test Result Status", "Obtained Test Results") + '"'
    ReturnList.writelines("TestResultHeading=%s\n"%res )
    ReturnList.writelines("Obtain=%s\n"%obtainCol )
    ReturnList.writelines("NumberTCRequested=%d\n"%len(TestResultData) )
    ReturnList.writelines("NumberTCUpdated=0\n")
    ReturnList.writelines("Obtain=%s\n"%obtainCol )
    
    mod = '"' + DoorData[0][1] + '"'
    ReturnList.writelines("currMod = %s\n"%mod )
    ReturnList.writelines("Module m%d = null\n"%g_index_row)
    ReturnList.writelines("if (!null currMod){m%d = edit(currMod, true)}\n"%g_index_row)
    ReturnList.writelines("Array ArrObjectInfor%d = create(%d,%d)\n" % (g_index_row,len(TestResultData), number_of_column_in_data))
    #DXL: write data of column 1 (requirement absolute number)
#     old_row_no = g_cur_row
    for row_no in TestResultData:
#         row_no = g_cur_row
        ReturnList.writelines('put(ArrObjectInfor%d, %s, %d, %d)\n' % (g_index_row, row_no[0] , TestResultData.index(row_no), 0))
        ReturnList.writelines('put(ArrObjectInfor%d, "%s", %d, %d)\n' % (g_index_row, row_no[1], TestResultData.index(row_no), 1))
        ReturnList.writelines('put(ArrObjectInfor%d, "%s", %d, %d)\n' % (g_index_row, row_no[2], TestResultData.index(row_no), 2))
#         print(data[row_no][0]),
#         print("--> " + data[row_no][1])
#         g_cur_row += 1
        print("Test case %s : Generate completely" %row_no[0])
        #DXL: Write for loop
    forloop = """for (loop = 0; loop<%d; loop++)
{
    ObjectType = "Object Type"
	CurrTestCaseAbsID = (int get(ArrObjectInfor%d,loop,0))
	Object currOject = object(CurrTestCaseAbsID)
	string ObjType = currOject.ObjectType
	if(!null currOject and (ObjType == "Test Case"))
	{    
		string str_currOject= currOject.TestResultHeading   
        string str_ObtainedValue = currOject.Obtain
        if ((str_currOject =="-") or (str_currOject =="n/a") or (str_currOject =="failed") or (str_currOject =="passed"))      
        {                                                           
            currOject.TestResultHeading = (string get(ArrObjectInfor0,loop,1))  
            if (str_ObtainedValue == "")
            {
                currOject.Obtain = (string get(ArrObjectInfor0,loop,2)) 
            }
            else
            {
                currOject.Obtain = str_ObtainedValue  "\\n---------------------------------------------------------------\\n" + (string get(ArrObjectInfor0,loop,2))
            }
            NumberTCUpdated = NumberTCUpdated +1
            print "Completed Test Case " CurrTestCaseAbsID "\\n"                  
        }  
        else
        {
            print CurrTestCaseAbsID " has previous test result Not tested. Please check\\n"
        }
	}
	else
	{
		print CurrTestCaseAbsID " is null or Object Type is not Test Case\\n"
	}
}
print "Requested: " NumberTCRequested " test cases -- Updated: " NumberTCUpdated " test cases \n" 
""" % (len(TestResultData) ,g_index_row)
    ReturnList.writelines(forloop)
#     ReturnList.writelines( "\nsave(Module m%d)\n"%g_index_row)
#     ReturnList.writelines("close(Module m%d)\n"%g_index_row)
    g_index_row=g_index_row+1
    ReturnList.close()

if __name__== "__main__":
    #Process()
    pass

# if __name__ == '__main__':
#     excel = open_workbook(excel_file_name)
#     sheet_0 = excel.sheet_by_index(sheet_number)
#     if excel is None:
#         print("Cannot find %s" % sys.argv[1])
#     else:
#         Sample()
#          read_excel_file()
#          g_oldreq = data[1][2]
#          for row_no in range(start_row_number, len(data) - 1):
#              row_no = 0
#              write_dxl_file()
# 
#         print("Finished!")

#     ReturnList.close()
